version: "3.8"

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      # Use target to specify which stage to use for development
      target: builder
    ports:
      - "3000:3000"
    # For development mode, we'll use these volumes
    # In production, you would use the final image without these volumes
    volumes:
      - ./frontend:/app
      # Prevent node_modules from being overwritten by the host volume
      - /app/node_modules
      # Prevent .next from being overwritten
      - /app/.next
    environment:
      NODE_ENV: development
      # Prevent Next.js from opening a browser
      BROWSER: none
      # Enable polling for file changes in Docker
      WATCHPACK_POLLING: true
      # Disable telemetry for Next.js
      NEXT_TELEMETRY_DISABLED: 1
      # PostgreSQL connection environment variables
      DATABASE_URL: ${DATABASE_URL}
    # Override CMD in Dockerfile to run in development mode with hot-reloading
    command: npm run dev
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:16-alpine
    container_name: imgenhancify-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    name: imgenhancify-postgres-data
